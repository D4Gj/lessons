'__class__'  # для работы с классом
'__delattr__(self, name, value)'  # удаление атрибута
'__dict__'  # dict()
'__dir__',  # dir()
'__doc__',  # doc()
'__eq__',  # x == y
'__format__',  # .format()
'__ge__',  # x >= y
'__getattribute__',  # получение атрибута
'__gt__',  # x > y
'__hash__',  # получение хеш суммы объекта, например, для добавления в словарь
'__init__',  # конструктор (инициализатор)
'__init_subclass__',  # конструктор подкласса
'__le__',  # x <= y
'__lt__',  # x < y
'__module__',  # модуль в котором находится класс
'__ne__',  # x != y
'__new__',  # управляет созданием экземпляра класса, в качестве аргумента принимает класс. Возвращает экземпляр и
# передаёт в init
'__reduce__',  # гуглите
'__reduce_ex__',  # гуглите
'__repr__',  # вызывается функцией repr. Возвращает "сырые" данные используемые для внутреннего представления python
'__setattr__',  # назначение атрибута
'__sizeof__',  # количества чего-то в объекте
'__str__',  # строковое представление объекта
'__bool__'  # вызывается при проверке истинности, если не определён, используется len
'__len__'  # количество данных в объекте
'__reversed__'  # итератор из элементов, следующих в обратном порядке
'__contains__'  # vova in people проверка на принадлежность элемента контейнеру

'__add__'  # сложение x + y
'__sub__'  # вычитание х - у
'__mul__'  # умножение x * y
'__truediv__'  # деление x / y
'__floordiv__'  # целочисленное деление x // y
'__mod__'  # остаток от деления x % y
'__divmod__'  # divmod(x,y) частное и остаток
'__pow__'  # возведение в степень
'__iadd'  # +=
'__isub'  # -=
'__imul'  # *=
'__itruediv'  # /=
'__ifloordiv'
'__imod'  # %=
'__ipow'  # **=


class Test(int):
    def __init__(self, num) -> None:
        super().__init__()
        self.num = num

    def __add__(self, other):
        return self.num * other


a = Test(5)
print(a + 10)
print(a * 10)
